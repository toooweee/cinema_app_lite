import React, { useState, useEffect } from "react";
import { usersAPI } from "../../api/users.js";
import { rolesAPI } from "../../api/roles.js";
import { useNotification } from "../../hooks/useNotification.js";
import { useAuth } from "../../hooks/useAuth.js";
import UserCard from "../../components/UserCard/UserCard.jsx";
import "./Client.css";

const Client = () => {
  const [clients, setClients] = useState([]);
  const [roles, setRoles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedRole, setSelectedRole] = useState("");
  const { showError, showSuccess } = useNotification();
  const { user } = useAuth();

  useEffect(() => {
    fetchClients();
  }, []);

  const fetchClients = async () => {
    try {
      setLoading(true);

      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–æ–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [clientsData, rolesData] = await Promise.all([
        usersAPI.getAllClients(),
        rolesAPI.getAll(),
      ]);

      setClients(clientsData);
      setRoles(rolesData);
    } catch (error) {
      console.error("Error fetching clients:", error);
      showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤");
    } finally {
      setLoading(false);
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  const filteredClients = clients.filter((client) => {
    const matchesSearch =
      (client.name &&
        client.name.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (client.user?.email &&
        client.user.email.toLowerCase().includes(searchTerm.toLowerCase()));

    const matchesRole =
      !selectedRole || (client.role && client.role.id === selectedRole);

    return matchesSearch && matchesRole;
  });

  const handleDeleteClient = async (client) => {
    if (
      !window.confirm(
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ "${client.name || client.user?.email}"?`
      )
    ) {
      return;
    }

    try {
      await usersAPI.deleteClient(client.id);
      await fetchClients();
      showSuccess("–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
    } catch (error) {
      console.error("Error deleting client:", error);
      showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞");
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  const isAdmin =
    user?.client?.role === "Admin" || user?.employee?.role === "Admin";
  const isManager =
    user?.client?.role === "Manager" || user?.employee?.role === "Manager";
  const canDelete = isAdmin;
  const canView = isAdmin || isManager;

  // –û—Ç–ª–∞–¥–∫–∞
  console.log("user:", user);
  console.log(
    "isAdmin:",
    isAdmin,
    "isManager:",
    isManager,
    "canDelete:",
    canDelete
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  if (!canView) {
    return (
      <div className="clients-loading">
        <div className="no-clients-icon">üö´</div>
        <h3>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h3>
        <p>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="clients-loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...</p>
      </div>
    );
  }

  return (
    <div className="clients-container">
      <div className="clients-header">
        <div className="clients-title-section">
          <h1>–ö–ª–∏–µ–Ω—Ç—ã</h1>
          <p>
            {isAdmin
              ? "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑–æ–π –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞"
              : "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞"}
          </p>
        </div>

        <div className="clients-filters">
          <div className="search-box">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
            <span className="search-icon">üîç</span>
          </div>

          <select
            value={selectedRole}
            onChange={(e) => setSelectedRole(e.target.value)}
            className="role-filter"
          >
            <option value="">–í—Å–µ —Ä–æ–ª–∏</option>
            {roles.map((role) => (
              <option key={role.id} value={role.id}>
                {role.name}
              </option>
            ))}
          </select>
        </div>
      </div>

      <div className="clients-content">
        {filteredClients.length === 0 ? (
          <div className="no-clients">
            <div className="no-clients-icon">üë§</div>
            <h3>–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>
              {searchTerm || selectedRole
                ? "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞"
                : "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤"}
            </p>
          </div>
        ) : (
          <div className="clients-grid">
            {filteredClients.map((client) => (
              <UserCard
                key={client.id}
                user={client}
                type="client"
                onDelete={handleDeleteClient}
                canDelete={canDelete}
              />
            ))}
          </div>
        )}
      </div>

      <div className="clients-stats">
        <div className="stat-item">
          <span className="stat-label">–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:</span>
          <span className="stat-value">{clients.length}</span>
        </div>
        <div className="stat-item">
          <span className="stat-label">–° –æ—Ç–∑—ã–≤–∞–º–∏:</span>
          <span className="stat-value">
            {
              clients.filter(
                (client) =>
                  client.user?.reviews && client.user.reviews.length > 0
              ).length
            }
          </span>
        </div>
        <div className="stat-item">
          <span className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö:</span>
          <span className="stat-value">
            {clients.filter((client) => client.user?.isActivated).length}
          </span>
        </div>
        <div className="stat-item">
          <span className="stat-label">–í–∞—à–∏ –ø—Ä–∞–≤–∞:</span>
          <span className="stat-value">
            {isAdmin
              ? "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
              : isManager
                ? "–ú–µ–Ω–µ–¥–∂–µ—Ä"
                : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}
          </span>
        </div>
      </div>
    </div>
  );
};

export default Client;
